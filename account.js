const {create, AxiosInstance} = require('axios');
const FormData = require('form-data');
const {JSDOM} = require("jsdom");

class Account {
    username = "";
    password = "";
    lessonId = 0;

    /**
     * @property {AxiosInstance} _client
     * @private
     */
    _client;

    constructor(username, password, lessonId) {
        this.username = username;
        this.password = password;
        this.lessonId = lessonId;
        this._client = create({
            baseURL: 'https://asoiuexam.com',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
            },
            maxRedirects: 0,
        });

    }


    async login() {

        const form = new FormData();
        form.append('studentLogin', this.username);
        form.append('studentPassword', this.password);
        form.append('studentSubmit', "Daxil ol");
        try {
            await this._client.post(`/studentLoginAction`, form, {headers: form.getHeaders()});
            return null;
        } catch (e) {
            if (e.response.headers.location.indexOf('/studentProfile') >= 0) {
                console.log('logged in')
                this._client.defaults.headers.common['Cookie'] = e.response.headers['set-cookie'][0]
                return {user: await this.getName()};
            } else {
                return null;
            }
        }
    }


    async getName() {
        const htmlContent = await this.examListContent();
        if (htmlContent === null) return null;
        const {window} = new JSDOM(htmlContent);
        const $ = require("jquery")(window);
        let result = "";
        $('div > p.profileT').each(function (index) {
            result += $(this).text() + "\n";
        });
        return result;
    }


    async examListContent() {
        try {
            const response = await this._client.get("/studentExamLessonList");
            return response.data;
        } catch (e) {
            return null;
        }
    }


    async lessonList() {
        const response = await this._client.get('/studentProfile');
        const {window} = new JSDOM(response.data);
        const $ = require("jquery")(window);

        let result = [];
        $("#myTable > tbody > tr").each(function (index) {
            const lesson = $(this);
            const href = lesson.find('td:nth-child(2) > a').attr('href');
            result.push({
                name: lesson.find('td:nth-child(1)').text(),
                id: href.substring(href.lastIndexOf('/') + 1),
            });
        });
        return result;
    }
}


module.exports = {Account};
